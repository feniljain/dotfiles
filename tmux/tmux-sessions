#!/bin/bash

# set -e # stop script on errors
# set -u # stop script on unset vars

PROJECTS="~/Projects"
DYTE="~/Projects/work/dyte"
KNOWLEDGE_BASE="~/Projects/knowledge-base"
RUST_PROJECTS="~/Projects/rust-projects"
GOLANG_PROJECTS="~/Projects/golang-projects"
HASKELL_PROJECTS="~/Projects/haskell-projects"
CPP_PROJECTS="~/Projects/cpp-projects"

createWindows() {
    N=$1

    # Create N windows
    for (( i=2; i<=$N; ++i)); do
        case $i in
        2)
           tmux neww -t $sessionName -n 'Secondary'
           ;;
        3)
           if [ $N == 4 ]; then
            tmux neww -t $sessionName -n 'Tertiary'
           else
            tmux neww -t $sessionName -n 'kb-htop-buf'
           fi
           ;;
        4)
           tmux neww -t $sessionName -n 'Misc'
           ;;
        *) echo "Wrong index $i"
        esac
    done
}

sourceNvm() {
    local NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"

    if [ ! -d "$NVM_DIR" ]; then
    	echo "not exporting nvm config as ~/.nvm does not exist"
    	return
    fi

    export NVM_DIR
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    if [[ -e ~/.nvm/alias/default ]]; then
      PATH="${PATH}:${HOME}.nvm/versions/node/$(cat ~/.nvm/alias/default)/bin"
    fi
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

createSession() {
    local session=$1
    local cmd="tmux new -s $sessionName -d > /dev/null 2>&1"

    eval $cmd
}

buildVIFMCmd() {
    local primaryFolder=$1
    local secondaryFolder=$2

    vifmCmd="vifm $primaryFolder $secondaryFolder"
}

buildAppointySession() {

    # Window 1
    buildVIFMCmd "$APPOINTY"
    tmux select-window -t $sessionName:1
    tmux rename-window 'Primary'
    # tmux send-keys -t $sessionName:0.0 "$vifmCmd"
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 2
    buildVIFMCmd "$APPOINTY"
    tmux select-window -t $sessionName:2
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 3
    tmux select-window -t $sessionName:3
    buildVIFMCmd "$APPOINTY" "$KNOWLEDGE_BASE"
    tmux send-keys "$vifmCmd" 'C-m'
    tmux split-window -h 'exec htop'
    tmux split-window -v

    # Window 4
    tmux select-window -t $sessionName:4
    tmux send-keys "sudo openfortigui" 'C-m'
}

buildDyteSession() {

    # Window 1
    buildVIFMCmd "$DYTE"
    tmux select-window -t $sessionName:1
    tmux rename-window 'Primary'
    # tmux send-keys -t $sessionName:0.0 "$vifmCmd"
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 2
    buildVIFMCmd "$DYTE"
    tmux select-window -t $sessionName:2
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 3
    buildVIFMCmd "$DYTE"
    tmux select-window -t $sessionName:3
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 4
    tmux select-window -t $sessionName:4
    buildVIFMCmd "$DYTE" "$KNOWLEDGE_BASE"
    tmux send-keys "$vifmCmd" 'C-m'
    tmux split-window -h 'exec htop'
    tmux split-window -v

    # Window 5
    # tmux select-window -t $sessionName:5
    # tmux send-keys "sudo openfortigui" 'C-m'
}

buildGenericSession() {
    folderPath=$1

    # Window 1
    buildVIFMCmd "$folderPath"
    tmux select-window -t $sessionName:1
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 2
    buildVIFMCmd "$folderPath"
    tmux select-window -t $sessionName:2
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 3
    buildVIFMCmd "$folderPath"
    tmux select-window -t $sessionName:3
    tmux send-keys "$vifmCmd" 'C-m'

    # Window 4
    tmux select-window -t $sessionName:4
    buildVIFMCmd "$PROJECTS" "$KNOWLEDGE_BASE"
    tmux send-keys "$vifmCmd" 'C-m'
    tmux split-window -h 'exec htop'
    tmux split-window -v
}

sessionAlreadyExists() {
    sessionExists=1

    tmux has-session -t $1 2>/dev/null

    if [ $? != 0 ]; then
        sessionExists=0
    fi
}

flag=$1

sessionName=""

# Build session
case "$flag" in
    "-d")
	sourceNvm
        sessionName="dyte"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 4
            buildDyteSession
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "-d1")
        sessionName="dyte-1"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 4
            buildDyteSession
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "-g")
        sessionName="go"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 3
            buildGenericSession "$GOLANG_PROJECTS"
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "-r")
        sessionName="rust"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 4
            buildGenericSession "$RUST_PROJECTS"
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "-h")
        sessionName="haskell"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 4
            buildGenericSession "$HASKELL_PROJECTS"
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "-c")
        sessionName="c/cpp"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 4
            buildGenericSession "$CPP_PROJECTS"
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "-p")
        sessionName="personal"
        sessionAlreadyExists $sessionName
        if [[ $sessionExists == 0 ]]
        then
            createSession $sessionName
            createWindows 3
            buildGenericSession "$PROJECTS"
        else
            echo "session already exists, directly connecting to it"
        fi
        ;;
    "new")
        sessionName=$2
        if [[ $2 != "" ]]
        then
            sessionAlreadyExists $sessionName
            if [[ $sessionExists == 0 ]]
            then
                createSession $sessionName
                createWindows 1
            else
                echo "session already exists, directly connecting to it"
            fi
        else
            eval "tmux new"
        fi
        ;;
    *)
        echo "Invalid usage"
        exit 1
        ;;
esac

# Attach to the session
tmux attach-session -t $sessionName
