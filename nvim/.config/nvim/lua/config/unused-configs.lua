-- ===========================================================================================================
-- -- require("dapui").setup({
--
--   icons = {
--     expanded = "⯆",
--     collapsed = "⯈",
--     circular = "↺"
--   },
--   mappings = {
--     -- Use a table to apply multiple mappings
--     expand = {"<CR>", "<2-LeftMouse>"},
--     open = "o",
--     remove = "d",
--     edit = "e",
--   },
--   sidebar = {
--     elements = {
--       -- You can change the order of elements in the sidebar
--       "scopes",
--       "stacks",
--       "watches"
--     },
--     width = 40,
--     position = "left" -- Can be "left" or "right"
--   },
--   tray = {
--     elements = {
--       "repl"
--     },
--     height = 10,
--     position = "bottom" -- Can be "bottom" or "top"
--   },
--   floating = {
--     max_height = nil, -- These can be integers or a float between 0 and 1.
--     max_width = nil   -- Floats will be treated as percentage of your screen.
--   }
-- })
--
-- local dap = require"dap"
--
-- dap.adapters.go = {
--   type = 'executable';
--   command = 'node';
--   args = {os.getenv('HOME') .. '/Projects/softwares/vscode-go'};
-- }
-- dap.configurations.go = {
--   {
--     type = 'go';
--     name = 'Debug';
--     request = 'launch';
--     showLog = false;
--     program = "${file}";
--     dlvToolPath = vim.fn.exepath('dlv')  -- Adjust to where delve is installed
--   },
-- }
-- ===========================================================================================================
-- -- require'rust-tools.hover_range'.hover_range()

-- local capabilities = require "fenil.cmp".capabilities
-- local on_attach = require "fenil.lsp".on_attach

-- require('rust-tools').setup {
--     server = {
--         cmd = { "rustup", "run", "nightly", "rust-analyzer" },
--         on_attach = on_attach,
--         capabilities = capabilities,
--         settings = {
--             -- to enable rust-analyzer settings visit:
--             -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
--             ["rust-analyzer"] = {
--                 -- enable clippy on save
--                 checkOnSave = {
--                     command = "clippy"
--                 },
--             },
--         },
--     }
-- }
-- ===========================================================================================================
--
-- return {
--     -- on_attach = function ()
--     --     print("rust_analyzer attached")
--     -- end,
--     cmd = { "rust-analyzer" },
--     root_markers = { "Cargo.lock" },
--     filetypes = { "rust" },
--     settings = {
--         ["rust-analyzer"] = {
--             -- server = {
--             --     -- path = '/Users/feniljain/Projects/rust-projects/rust-analyzer/fix_enum_completion/target/release/rust-analyzer',
--             --     -- path = '~/Projects/rust-projects/rust-analyzer/fix_enum_completion/target/release/rust-analyzer',
--             -- },
--             -- checkOnSave = {
--             --     command = 'clippy',
--             -- },
--             checkOnSave = true,
--             -- trace = {
--             --     server = "verbose",
--             --     extension = true,
--             -- },
--             rustc = {
--                 source = "discover",
--             },
--
--         },
--     },
-- }
--
-- ===========================================================================================================
-- To show search index when cmdheight=0
-- https://www.reddit.com/r/neovim/comments/12o6tk5/search_index/

-- M = {}

-- local search_count_extmark_id
-- M.show_search_index = function()
-- 	local namespaceId = vim.api.nvim_create_namespace("search")
-- 	vim.api.nvim_buf_clear_namespace(0, namespaceId, 0, -1)
-- 	local searchCount = vim.fn.searchcount()
-- 	search_count_extmark_id = vim.api.nvim_buf_set_extmark(0, namespaceId, vim.api.nvim_win_get_cursor(0)[1] - 1, 0, {
-- 		virt_text = { { "[" .. searchCount.current .. "/" .. searchCount.total .. "]", "StatusLine" } },
-- 		virt_text_pos = "eol",
-- 	})
--
-- 	vim.cmd("redraw")
-- end
--
-- M.clear_search_index = function()
-- 	local namespaceId = vim.api.nvim_get_namespaces()["search"]
-- 	vim.api.nvim_buf_del_extmark(0, namespaceId, search_count_extmark_id)
-- end
--
-- -- these keys should work as they normally do, but additionally
-- -- we want to trigger show_search_index with them
-- local keys = { "n", "N", "*", "#", "g*", "g#" }
-- for _, key in ipairs(keys) do
-- 	vim.keymap.set("n", key, function()
-- 		vim.cmd("normal! " .. key)
-- 		M.show_search_index()
-- 	end, { noremap = true })
-- end
--
-- vim.keymap.set("n", "<Esc>", function()
-- 	M.clear_search_index()
-- end)
--
-- local group = vim.api.nvim_create_augroup("SearchIndex", { clear = true })
-- vim.api.nvim_create_autocmd("CmdlineLeave", {
-- 	group = group,
-- 	callback = function(event)
-- 		-- for some reason "pattern" doesn't work when adding "?"
-- 		if event.match == "/" or event.match == "?" then
-- 			M.show_search_index()
-- 		end
-- 	end,
-- })

-- return M
-- ===========================================================================================================
