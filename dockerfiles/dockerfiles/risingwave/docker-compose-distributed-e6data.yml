---
x-image: &image
  image: ${RW_IMAGE:-risingwavelabs/risingwave:v2.0.1}
services:
  compactor-0:
    <<: *image
    command:
      - compactor-node
      - "--listen-addr"
      - "0.0.0.0:6660"
      - "--advertise-addr"
      - "compactor-0:6660"
      - "--prometheus-listener-addr"
      - "0.0.0.0:1260"
      - "--meta-address"
      - "http://meta-node-0:5690"
      - "--config-path"
      - /risingwave.toml
    expose:
      - "6660"
      - "1260"
    ports: [ ]
    depends_on:
      - meta-node-0
    networks:
      - risingwave_e6data
    volumes:
      - "./risingwave.toml:/risingwave.toml"
    environment:
      RUST_BACKTRACE: "1"
      # If ENABLE_TELEMETRY is not set, telemetry will start by default
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-true}
    container_name: compactor-0
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/6660; exit $$?;'
      interval: 1s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
  compute-node-0:
    <<: *image
    command:
      - compute-node
      - "--listen-addr"
      - "0.0.0.0:5688"
      - "--advertise-addr"
      - "compute-node-0:5688"
      - "--prometheus-listener-addr"
      - "0.0.0.0:1222"
      - "--meta-address"
      - "http://meta-node-0:5690"
      - "--config-path"
      - /risingwave.toml
    expose:
      - "5688"
      - "1222"
    ports: [ ]
    depends_on:
      - meta-node-0
    networks:
      - risingwave_e6data
    volumes:
      - "./risingwave.toml:/risingwave.toml"
    environment:
      RUST_BACKTRACE: "1"
      # If ENABLE_TELEMETRY is not set, telemetry will start by default
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-true}
    container_name: compute-node-0
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5688; exit $$?;'
      interval: 1s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 26G
        reservations:
          memory: 26G
  postgres-0:
    image: "postgres:15-alpine"
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_DB=metadata
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    expose:
      - "5432"
    ports:
      - "8432:5432"
    networks:
      - risingwave_e6data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    restart: always
  frontend-node-0:
    <<: *image
    command:
      - frontend-node
      - "--listen-addr"
      - "0.0.0.0:4566"
      - "--meta-addr"
      - "http://meta-node-0:5690"
      - "--advertise-addr"
      - "frontend-node-0:4566"
      - "--config-path"
      - /risingwave.toml
      - "--prometheus-listener-addr"
      - "0.0.0.0:2222"
    expose:
      - "4566"
    ports:
      - "4566:4566"
    depends_on:
      - meta-node-0
    networks:
      - risingwave_e6data
    volumes:
      - "./risingwave.toml:/risingwave.toml"
    environment:
      RUST_BACKTRACE: "1"
      # If ENABLE_TELEMETRY is not set, telemetry will start by default
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-true}
    container_name: frontend-node-0
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/4566; exit $$?;'
      interval: 1s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
  grafana-0:
    image: "grafana/grafana-oss:latest"
    command: [ ]
    expose:
      - "3001"
    ports:
      - "3001:3001"
    depends_on: [ ]
    networks:
      - risingwave_e6data
    volumes:
      - "grafana-0:/var/lib/grafana"
      - "./grafana.ini:/etc/grafana/grafana.ini"
      - "./grafana-risedev-datasource.yml:/etc/grafana/provisioning/datasources/grafana-risedev-datasource.yml"
      - "./grafana-risedev-dashboard.yml:/etc/grafana/provisioning/dashboards/grafana-risedev-dashboard.yml"
      - "./dashboards:/dashboards"
    environment: {}
    container_name: grafana-0
    healthcheck:
      test: 
        - CMD-SHELL
        - bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/3001; exit $$?;'
      interval: 1s
      timeout: 5s
      retries: 5
    restart: always
  meta-node-0:
    <<: *image
    command:
      - meta-node
      - "--listen-addr"
      - "0.0.0.0:5690"
      - "--advertise-addr"
      - "meta-node-0:5690"
      - "--dashboard-host"
      - "0.0.0.0:5691"
      - "--prometheus-host"
      - "0.0.0.0:1250"
      - "--prometheus-endpoint"
      - "http://prometheus-0:9500"
      - "--backend"
      - sql
      - "--sql-endpoint"
      - "postgres://postgres:@postgres-0:5432/metadata"
      - "--state-store"
      - "hummock+s3://QmtAviY827U05C1M6m6r:fOWVhnMjDLoTT8w4FCQFi9kRe6v6aZzmt4CqRolp@minio-0:9301/bucketto"
      - "--data-directory"
      - "data_dir"
      - "--config-path"
      - /risingwave.toml
    expose:
      - "5690"
      - "1250"
      - "5691"
    ports:
      - "5690:5690"
      - "5691:5691"
    depends_on:
      - "postgres-0"
    networks:
      - risingwave_e6data
    volumes:
      - "./risingwave.toml:/risingwave.toml"
    environment:
      RUST_BACKTRACE: "1"
      # If ENABLE_TELEMETRY is not set, telemetry will start by default
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-true}
      RW_TELEMETRY_TYPE: ${RW_TELEMETRY_TYPE:-"docker-compose"}
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: 'QmtAviY827U05C1M6m6r'
      AWS_SECRET_ACCESS_KEY: 'fOWVhnMjDLoTT8w4FCQFi9kRe6v6aZzmt4CqRolp'
      S3_ENDPOINT: 'http://minio-0:9301'
      AWS_ENDPOINT_URL_S3: 'http://minio-0:9301'
      # S3_BUCKET_NAME: 'hummock001'
    container_name: meta-node-0
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5690; exit $$?;'
      interval: 1s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          # spark-0:
          #   build:
          #     context: .
          #     dockerfile: spark.dockerfile
          #   command:
          #       - "tail"
          #       - "-f"
          #       - "/dev/null"
          #   networks:
          #     - risingwave_e6data
          #   volumes:
          #     - "~/dockerfiles/spark/spark-data/:/data"
          #   container_name: "spark-0"
  prometheus-0:
    image: "prom/prometheus:latest"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.listen-address=0.0.0.0:9500"
      - "--storage.tsdb.retention.time=30d"
    expose:
      - "9500"
    ports:
      - "9500:9500"
    depends_on: [ ]
    networks:
      - risingwave_e6data
    volumes:
      - "prometheus-0:/prometheus"
      - "./prometheus.yaml:/etc/prometheus/prometheus.yml"
    environment: {}
    container_name: prometheus-0
    healthcheck:
      test:
        - CMD-SHELL
        - sh -c 'printf "GET /-/healthy HTTP/1.0\n\n" | nc localhost 9500; exit $$?;'
      interval: 1s
      timeout: 5s
      retries: 5
    restart: always
volumes:
  grafana-0:
    external: false
  prometheus-0:
    external: false
networks:
  risingwave_e6data:
    external: true
